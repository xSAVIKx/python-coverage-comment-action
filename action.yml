name: Python Coverage Comment
branding:
  icon: 'umbrella'
  color: 'purple'
description: >
  Publish diff coverage report as PR comment, and create a coverage badge
  to display on the readme.
inputs:
  GITHUB_TOKEN:
    description: >
      A GitHub token to write comments and write the badge to the wiki.
      Set to `$ {{ github.token }}` (without the space between `$` and `{`).
    required: true
  GITHUB_PR_RUN_ID:
    description: >
      Only useful on the "workflow_run" part of the workflow.
      Set to `$ {{ github.event.workflow_run.id }}`  (without the space between `$` and `{`).
    required: false
  COMMENT_TEMPLATE:
    description: >
      [Advanced] Specify a different template for the comments that will be written on the PR.
    required: false
  BADGE_FILENAME:
    description: >
      Name of the json file containing badge informations stored in the repo
      wiki.
    default: python-coverage-comment-action-badge.json
    required: false
  COMMENT_ARTIFACT_NAME:
    description: >
      Name of the artifact in which the body of the comment to post on the PR is stored.
    default: python-coverage-comment-action
    required: false
  COMMENT_FILENAME:
    description: >
      Name of the file in which the body of the comment to post on the PR is stored.
    default: python-coverage-comment-action.txt
    required: false
  MINIMUM_GREEN:
    description: >
      If the coverage percentage is above or equal to this value, the badge
      will be green.
    default: 100
    required: false
  MINIMUM_ORANGE:
    description: >
      If the coverage percentage is not green and above or equal to this value,
      the badge will be orange. Otherwise it will be red.
    default: 70
    required: false
  MERGE_COVERAGE_FILES:
    description: >
      If true, will run `coverage combine` before reading the `.coverage` file.
    default: false
  VERBOSE:
    description: >
      If true, produces more output. Useful for debugging.
    default: false
outputs:
  COMMENT_FILE_WRITTEN:
    description: >
      If "true", a comment file was written to COMMENT_FILENAME. If "false",
      no comment file was written (because the comment was already posted).
runs:
  using: docker
  image: Dockerfile
#  image: docker://ewjoachim/python-coverage-comment-action:latest
  env:
    GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
    GITHUB_PR_RUN_ID: ${{ inputs.GITHUB_PR_RUN_ID }}
    BADGE_FILENAME: ${{ inputs.BADGE_FILENAME }}
    COMMENT_ARTIFACT_NAME: ${{ inputs.COMMENT_ARTIFACT_NAME }}
    COMMENT_FILENAME: ${{ inputs.COMMENT_FILENAME }}
    MINIMUM_GREEN: ${{ inputs.MINIMUM_GREEN }}
    MINIMUM_ORANGE: ${{ inputs.MINIMUM_ORANGE }}
    MERGE_COVERAGE_FILES: ${{ inputs.MERGE_COVERAGE_FILES }}
    VERBOSE: ${{ inputs.VERBOSE }}
